//===-- AltairXSubtarget.h - Define Subtarget for the AltairX -------*- C++
//-*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the AltairX specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_ALTAIRX_SUBTARGET_H
#define LLVM_LIB_TARGET_ALTAIRX_SUBTARGET_H

#include "AltairXFrameLowering.h"
#include "AltairXISelLowering.h"
#include "AltairXInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"

#define GET_SUBTARGETINFO_HEADER
#include "AltairXGenSubtargetInfo.inc"

namespace llvm {

class AltairXSubtarget : public AltairXGenSubtargetInfo {
protected:
  SelectionDAGTargetInfo TSInfo;
  AltairXInstrInfo InstrInfo;
  AltairXFrameLowering FrameLowering;
  AltairXTargetLowering TLInfo;
  AltairXRegisterInfo RegInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  AltairXSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                   StringRef TuneCPU, const TargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS, StringRef TuneCPU);

  AltairXSubtarget &initializeSubtargetDependencies(const Triple &TT,
                                                    StringRef CPU, StringRef FS,
                                                    StringRef TuneCPU,
                                                    const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  const AltairXInstrInfo *getInstrInfo() const override { return &InstrInfo; }

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const AltairXRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }

  const AltairXTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }

  /// getMaxInlineSizeThreshold - Returns the maximum memset / memcpy size
  /// that still makes it profitable to inline the call.
  unsigned getMaxInlineSizeThreshold() const { return 64; }
};

} // namespace llvm

#endif // end LLVM_LIB_TARGET_ALTAIRX_SUBTARGET_H
